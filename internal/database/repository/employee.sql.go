// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: employee.sql

package repository

import (
	"context"
	"database/sql"
)

const addEmployee = `-- name: AddEmployee :one
INSERT INTO company_employees (
        company_id,
        name,
        email,
        msisdn,
        role,
        user_id
    )
VALUES (
    $1, $2, $3, $4, $5, $6
    )
RETURNING id, name, msisdn, email, role, status, company_id, user_id, created_at, updated_at
`

type AddEmployeeParams struct {
	CompanyID string         `json:"company_id"`
	Name      string         `json:"name"`
	Email     sql.NullString `json:"email"`
	Msisdn    string         `json:"msisdn"`
	Role      string         `json:"role"`
	UserID    sql.NullString `json:"user_id"`
}

func (q *Queries) AddEmployee(ctx context.Context, arg AddEmployeeParams) (CompanyEmployee, error) {
	row := q.db.QueryRowContext(ctx, addEmployee,
		arg.CompanyID,
		arg.Name,
		arg.Email,
		arg.Msisdn,
		arg.Role,
		arg.UserID,
	)
	var i CompanyEmployee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Msisdn,
		&i.Email,
		&i.Role,
		&i.Status,
		&i.CompanyID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEmployeesByCompanyID = `-- name: GetEmployeesByCompanyID :many
SELECT id, name, msisdn, email, role, status, company_id, user_id, created_at, updated_at FROM company_employees
 WHERE company_id = $1
 ORDER BY created_at desc
 LIMIT $2 OFFSET $3
`

type GetEmployeesByCompanyIDParams struct {
	CompanyID string `json:"company_id"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

func (q *Queries) GetEmployeesByCompanyID(ctx context.Context, arg GetEmployeesByCompanyIDParams) ([]CompanyEmployee, error) {
	rows, err := q.db.QueryContext(ctx, getEmployeesByCompanyID, arg.CompanyID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CompanyEmployee{}
	for rows.Next() {
		var i CompanyEmployee
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Msisdn,
			&i.Email,
			&i.Role,
			&i.Status,
			&i.CompanyID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployee = `-- name: UpdateEmployee :one
UPDATE company_employees SET 
        name = $2, 
        email = $3,
        role = $4,
        status = $5
    WHERE id = $1
RETURNING id, name, msisdn, email, role, status, company_id, user_id, created_at, updated_at
`

type UpdateEmployeeParams struct {
	ID     string         `json:"id"`
	Name   string         `json:"name"`
	Email  sql.NullString `json:"email"`
	Role   string         `json:"role"`
	Status string         `json:"status"`
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) (CompanyEmployee, error) {
	row := q.db.QueryRowContext(ctx, updateEmployee,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Role,
		arg.Status,
	)
	var i CompanyEmployee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Msisdn,
		&i.Email,
		&i.Role,
		&i.Status,
		&i.CompanyID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateEmployeeInvitationStatus = `-- name: UpdateEmployeeInvitationStatus :one
UPDATE company_employees SET 
        status = $2
    WHERE id = $1
RETURNING id, name, msisdn, email, role, status, company_id, user_id, created_at, updated_at
`

type UpdateEmployeeInvitationStatusParams struct {
	ID     string `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateEmployeeInvitationStatus(ctx context.Context, arg UpdateEmployeeInvitationStatusParams) (CompanyEmployee, error) {
	row := q.db.QueryRowContext(ctx, updateEmployeeInvitationStatus, arg.ID, arg.Status)
	var i CompanyEmployee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Msisdn,
		&i.Email,
		&i.Role,
		&i.Status,
		&i.CompanyID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
