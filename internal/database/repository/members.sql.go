// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: members.sql

package repository

import (
	"context"
	"database/sql"
	"time"
)

const addMember = `-- name: AddMember :one
INSERT INTO members (
        company_id,
        name,
        email,
        msisdn,
        role,
        user_id
    )
VALUES (
    $1, $2, $3, $4, $5, $6
    )
RETURNING id, name, msisdn, email, role, status, company_id, user_id, created_at, updated_at
`

type AddMemberParams struct {
	CompanyID string         `json:"company_id"`
	Name      string         `json:"name"`
	Email     sql.NullString `json:"email"`
	Msisdn    string         `json:"msisdn"`
	Role      string         `json:"role"`
	UserID    sql.NullString `json:"user_id"`
}

func (q *Queries) AddMember(ctx context.Context, arg AddMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, addMember,
		arg.CompanyID,
		arg.Name,
		arg.Email,
		arg.Msisdn,
		arg.Role,
		arg.UserID,
	)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Msisdn,
		&i.Email,
		&i.Role,
		&i.Status,
		&i.CompanyID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMembersByCompanyID = `-- name: GetMembersByCompanyID :many
SELECT id, name, msisdn, email, role, status, company_id, user_id, created_at, updated_at FROM members
 WHERE company_id = $1
 ORDER BY created_at desc
 LIMIT $2 OFFSET $3
`

type GetMembersByCompanyIDParams struct {
	CompanyID string `json:"company_id"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

func (q *Queries) GetMembersByCompanyID(ctx context.Context, arg GetMembersByCompanyIDParams) ([]Member, error) {
	rows, err := q.db.QueryContext(ctx, getMembersByCompanyID, arg.CompanyID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Member{}
	for rows.Next() {
		var i Member
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Msisdn,
			&i.Email,
			&i.Role,
			&i.Status,
			&i.CompanyID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserTeams = `-- name: GetUserTeams :many
SELECT members.id, members.name, members.msisdn, members.email, members.role, members.status, members.company_id, members.user_id, members.created_at, members.updated_at, companies.id, companies.name, companies.slug, companies.about, companies.msisdn, companies.email, companies.tin, companies.image_url, companies.banner_url, companies.brand_type, companies.owner_id, companies.total_sales, companies.is_active, companies.currency_code, companies.invitation_code, companies.created_at, companies.updated_at
FROM members
JOIN companies ON members.company_id = companies.id
WHERE members.user_id = $1
`

type GetUserTeamsRow struct {
	ID             string         `json:"id"`
	Name           string         `json:"name"`
	Msisdn         string         `json:"msisdn"`
	Email          sql.NullString `json:"email"`
	Role           string         `json:"role"`
	Status         string         `json:"status"`
	CompanyID      string         `json:"company_id"`
	UserID         sql.NullString `json:"user_id"`
	CreatedAt      time.Time      `json:"created_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
	ID_2           string         `json:"id_2"`
	Name_2         string         `json:"name_2"`
	Slug           string         `json:"slug"`
	About          sql.NullString `json:"about"`
	Msisdn_2       string         `json:"msisdn_2"`
	Email_2        string         `json:"email_2"`
	Tin            sql.NullString `json:"tin"`
	ImageUrl       sql.NullString `json:"image_url"`
	BannerUrl      sql.NullString `json:"banner_url"`
	BrandType      string         `json:"brand_type"`
	OwnerID        string         `json:"owner_id"`
	TotalSales     int32          `json:"total_sales"`
	IsActive       bool           `json:"is_active"`
	CurrencyCode   string         `json:"currency_code"`
	InvitationCode sql.NullString `json:"invitation_code"`
	CreatedAt_2    time.Time      `json:"created_at_2"`
	UpdatedAt_2    time.Time      `json:"updated_at_2"`
}

func (q *Queries) GetUserTeams(ctx context.Context, userID sql.NullString) ([]GetUserTeamsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserTeams, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserTeamsRow{}
	for rows.Next() {
		var i GetUserTeamsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Msisdn,
			&i.Email,
			&i.Role,
			&i.Status,
			&i.CompanyID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.Name_2,
			&i.Slug,
			&i.About,
			&i.Msisdn_2,
			&i.Email_2,
			&i.Tin,
			&i.ImageUrl,
			&i.BannerUrl,
			&i.BrandType,
			&i.OwnerID,
			&i.TotalSales,
			&i.IsActive,
			&i.CurrencyCode,
			&i.InvitationCode,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMember = `-- name: UpdateMember :one
UPDATE members SET 
        name = $2, 
        email = $3,
        role = $4,
        status = $5
    WHERE id = $1
RETURNING id, name, msisdn, email, role, status, company_id, user_id, created_at, updated_at
`

type UpdateMemberParams struct {
	ID     string         `json:"id"`
	Name   string         `json:"name"`
	Email  sql.NullString `json:"email"`
	Role   string         `json:"role"`
	Status string         `json:"status"`
}

func (q *Queries) UpdateMember(ctx context.Context, arg UpdateMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, updateMember,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Role,
		arg.Status,
	)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Msisdn,
		&i.Email,
		&i.Role,
		&i.Status,
		&i.CompanyID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateMemberInvitationStatus = `-- name: UpdateMemberInvitationStatus :one
UPDATE members SET 
        status = $2
    WHERE id = $1
RETURNING id, name, msisdn, email, role, status, company_id, user_id, created_at, updated_at
`

type UpdateMemberInvitationStatusParams struct {
	ID     string `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateMemberInvitationStatus(ctx context.Context, arg UpdateMemberInvitationStatusParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, updateMemberInvitationStatus, arg.ID, arg.Status)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Msisdn,
		&i.Email,
		&i.Role,
		&i.Status,
		&i.CompanyID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
